package sdifstructures;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
/**
 * <i>native declaration : line 343</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifNameValuesLS extends Structure {
	/**
	 * list of SdifNameValueTableT<br>
	 * C type : SdifListT*
	 */
	public sdifstructures.SdifListS.ByReference NVTList;
	/** C type : SdifNameValueTableT* */
	public sdifstructures.SdifNameValueTableS.ByReference CurrNVT;
	/** C type : SdifUInt4 */
	public int HashSize;
	public SdifNameValuesLS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("NVTList", "CurrNVT", "HashSize");
	}
	/**
	 * @param NVTList list of SdifNameValueTableT<br>
	 * C type : SdifListT*<br>
	 * @param CurrNVT C type : SdifNameValueTableT*<br>
	 * @param HashSize C type : SdifUInt4
	 */
	public SdifNameValuesLS(sdifstructures.SdifListS.ByReference NVTList, sdifstructures.SdifNameValueTableS.ByReference CurrNVT, int HashSize) {
		super();
		this.NVTList = NVTList;
		this.CurrNVT = CurrNVT;
		this.HashSize = HashSize;
	}
	public static class ByReference extends SdifNameValuesLS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifNameValuesLS implements Structure.ByValue {
		
	};
}
