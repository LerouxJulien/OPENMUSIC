package sdifstructures;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 496</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifFrameDataS extends Structure {
	/** C type : SdifFrameHeaderT* */
	public sdifstructures.SdifFrameHeaderS.ByReference Header;
	/** C type : SdifMatrixDataT** */
	public sdifstructures.SdifMatrixDataS.ByReference[] Matrix_s;
	public SdifFrameDataS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Header", "Matrix_s");
	}
	/**
	 * @param Header C type : SdifFrameHeaderT*<br>
	 * @param Matrix_s C type : SdifMatrixDataT**
	 */
	public SdifFrameDataS(sdifstructures.SdifFrameHeaderS.ByReference Header, sdifstructures.SdifMatrixDataS.ByReference Matrix_s[]) {
		super();
		this.Header = Header;
		if ((Matrix_s.length != this.Matrix_s.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Matrix_s = Matrix_s;
	}
	public static class ByReference extends SdifFrameDataS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifFrameDataS implements Structure.ByValue {
		
	};
}
