package sdifstructures;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifSelectionT extends Structure {
	/**
	 * allocated / freed by <br>
	 * SdifInitSelection / SdifFreeSelection<br>
	 * C type : char*
	 */
	public Pointer filename;
	/**
	 * allocated / freed by <br>
	 * SdifInitSelection / SdifFreeSelection<br>
	 * C type : char*
	 */
	public Pointer basename;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference stream;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference frame;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference matrix;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference column;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference row;
	/** C type : SdifListP */
	public sdifstructures.SdifListS.ByReference time;
	/** C type : SdifSelectIntMaskT */
	public SdifSelectIntMaskS streammask;
	/** C type : SdifSelectIntMaskT */
	public SdifSelectIntMaskS rowmask;
	/** C type : SdifSelectIntMaskT */
	public SdifSelectIntMaskS colmask;
	public SdifSelectionT() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("filename", "basename", "stream", "frame", "matrix", "column", "row", "time", "streammask", "rowmask", "colmask");
	}
	public static class ByReference extends SdifSelectionT implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifSelectionT implements Structure.ByValue {
		
	};
}
