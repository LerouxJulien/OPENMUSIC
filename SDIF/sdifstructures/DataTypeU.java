package sdifstructures;
import com.sun.jna.Pointer;
import com.sun.jna.Union;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.ShortByReference;
/**
 * <i>native declaration : line 446</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class DataTypeU extends Union {
	/** C type : SdifFloat4* */
	public FloatByReference Float4;
	/** C type : SdifFloat8* */
	public DoubleByReference Float8;
	/** C type : SdifInt1* */
	public Pointer Int1;
	/** C type : SdifInt2* */
	public ShortByReference Int2;
	/** C type : SdifInt4* */
	public IntByReference Int4;
	/**
	 * SdifInt8   *Int8  ;<br>
	 * C type : SdifUInt1*
	 */
	public Pointer UInt1;
	/** C type : SdifUInt2* */
	public ShortByReference UInt2;
	/** C type : SdifUInt4* */
	public IntByReference UInt4;
	/**
	 * SdifUInt8  *UInt8 ;<br>
	 * C type : SdifChar*
	 */
	public Pointer Char;
	/**
	 * generic pointer<br>
	 * C type : void*
	 */
	public Pointer Void;
	public DataTypeU() {
		super();
	}
	/** @param Float8 C type : SdifFloat8* */
	public DataTypeU(DoubleByReference Float8) {
		super();
		this.Float8 = Float8;
		setType(DoubleByReference.class);
	}
	/** @param Int2_or_UInt2 C type : SdifInt2*, or C type : SdifUInt2* */
	public DataTypeU(ShortByReference Int2_or_UInt2) {
		super();
		this.UInt2 = this.Int2 = Int2_or_UInt2;
		setType(ShortByReference.class);
	}
	/** @param Int4_or_UInt4 C type : SdifInt4*, or C type : SdifUInt4* */
	public DataTypeU(IntByReference Int4_or_UInt4) {
		super();
		this.UInt4 = this.Int4 = Int4_or_UInt4;
		setType(IntByReference.class);
	}
	/** @param Float4 C type : SdifFloat4* */
	public DataTypeU(FloatByReference Float4) {
		super();
		this.Float4 = Float4;
		setType(FloatByReference.class);
	}
	/**
	 * @param Int1_or_UInt1_or_Char_or_Void C type : SdifInt1*, or SdifInt8   *Int8  ;<br>
	 * C type : SdifUInt1*, or SdifUInt8  *UInt8 ;<br>
	 * C type : SdifChar*, or generic pointer<br>
	 * C type : void*
	 */
	public DataTypeU(Pointer Int1_or_UInt1_or_Char_or_Void) {
		super();
		this.Void = this.Char = this.UInt1 = this.Int1 = Int1_or_UInt1_or_Char_or_Void;
		setType(Pointer.class);
	}
	public static class ByReference extends DataTypeU implements com.sun.jna.Structure.ByReference {
		
	};
	public static class ByValue extends DataTypeU implements com.sun.jna.Structure.ByValue {
		
	};
}
