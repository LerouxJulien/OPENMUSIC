package sdifstructures;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * hash bin struct, containing linked list of entries<br>
 * <i>native declaration : line 26</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifHashNS extends Structure {
	/**
	 * pointer to next entry<br>
	 * C type : SdifHashNT*
	 */
	public SdifHashNS.ByReference Next;
	/** C type : SdifHashIndexUT */
	public SdifHashIndexU Index;
	/** C type : void* */
	public Pointer Data;
	public SdifHashNS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Next", "Index", "Data");
	}
	/**
	 * @param Next pointer to next entry<br>
	 * C type : SdifHashNT*<br>
	 * @param Index C type : SdifHashIndexUT<br>
	 * @param Data C type : void*
	 */
	public SdifHashNS(SdifHashNS.ByReference Next, SdifHashIndexU Index, Pointer Data) {
		super();
		this.Next = Next;
		this.Index = Index;
		this.Data = Data;
	}
	public static class ByReference extends SdifHashNS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifHashNS implements Structure.ByValue {
		
	};
}
