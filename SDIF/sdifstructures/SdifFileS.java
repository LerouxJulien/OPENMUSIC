package sdifstructures;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import sdifstructures.SdifStructuresLibrary.FILE;
/**
 * DOC:<br>
 * THE SDIF File Structure!<br>
 * <i>native declaration : line 772</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifFileS extends Structure {
	/**
	 * Name of the file, can be "stdin, stdout, stderr<br>
	 * C type : char*
	 */
	public Pointer Name;
	/**
	 * eWriteFile or eReadFile or ePredefinedTypes<br>
	 * C type : SdifFileModeET
	 */
	public int Mode;
	/** file is not pipe i/o */
	public int isSeekable;
	/**
	 * version of the SDIF format itself<br>
	 * C type : SdifUInt4
	 */
	public int FormatVersion;
	/**
	 * version of the description type collection<br>
	 * C type : SdifUInt4
	 */
	public int TypesVersion;
	/**
	 * DataBase of Names Values<br>
	 * C type : SdifNameValuesLT*
	 */
	public sdifstructures.SdifNameValuesLS.ByReference NameValues;
	/**
	 * DataBase of Matrix Types<br>
	 * C type : SdifHashTableT*
	 */
	public sdifstructures.SdifHashTableS.ByReference MatrixTypesTable;
	/**
	 * DataBase of Frame Types<br>
	 * C type : SdifHashTableT*
	 */
	public sdifstructures.SdifHashTableS.ByReference FrameTypesTable;
	/**
	 * SdifHashTableT     *StreamIDsTable;    DataBase of Stream IDs<br>
	 * DataBase of Stream IDs<br>
	 * C type : SdifStreamIDTableT*
	 */
	public sdifstructures.SdifStreamIDTableS.ByReference StreamIDsTable;
	/**
	 * List of (Time, Position in file)<br>
	 * C type : SdifTimePositionLT*
	 */
	public sdifstructures.SdifTimePositionLS.ByReference TimePositions;
	/**
	 * default selection parsed from Name<br>
	 * C type : SdifSelectionT*
	 */
	public sdifstructures.SdifSelectionT.ByReference Selection;
	/**
	 * Stream to read or to write<br>
	 * C type : FILE*
	 */
	public FILE Stream;
	/** C type : SdifSignature */
	public int CurrSignature;
	/**
	 * Current Frame Header can be NULL<br>
	 * C type : SdifFrameHeaderT*
	 */
	public sdifstructures.SdifFrameHeaderS.ByReference CurrFramH;
	/**
	 * Current Matrix Header can be NULL<br>
	 * C type : SdifMatrixHeaderT*
	 */
	public sdifstructures.SdifMatrixHeaderS.ByReference CurrMtrxH;
	/** C type : SdifFrameTypeT* */
	public sdifstructures.SdifFrameTypeS.ByReference CurrFramT;
	/** C type : SdifMatrixTypeT* */
	public sdifstructures.SdifMatrixTypeS.ByReference CurrMtrxT;
	/** C type : SdifFloat8 */
	public double PrevTime;
	/** C type : SdifSignatureTabT* */
	public sdifstructures.SdifSignatureTabS.ByReference MtrxUsed;
	/** C type : SdifOneRowT* */
	public sdifstructures.SdifOneRowS.ByReference CurrOneRow;
	/**
	 * data pointer used by SdifFReadMatrixData, never uses the Header field<br>
	 * C type : SdifMatrixDataT*
	 */
	public sdifstructures.SdifMatrixDataS.ByReference CurrMtrxData;
	public NativeSize FileSize;
	public NativeSize ChunkSize;
	/** C type : SdiffPosT */
	public long CurrFramPos;
	/** C type : SdiffPosT */
	public long StartChunkPos;
	/** C type : SdiffPosT */
	public long Pos;
	/** C type : SdifUInt2 */
	public short TypeDefPass;
	/** C type : SdifUInt2 */
	public short StreamIDPass;
	/**
	 * Name of the text file corresponding to the sdif file<br>
	 * C type : char*
	 */
	public Pointer TextStreamName;
	/**
	 * Stream text<br>
	 * C type : FILE*
	 */
	public FILE TextStream;
	/**
	 * Error count per level of severity<br>
	 * C type : SdifUInt4[eNumLevels]
	 */
	public int[] ErrorCount = new int[(int)sdifstructures.SdifStructuresLibrary.SdifErrorLevelE.eNumLevels];
	/**
	 * List of errors or warnings<br>
	 * C type : SdifErrorLT*
	 */
	public sdifstructures.SdifErrorLS.ByReference Errors;
	/** todo: hash table */
	public int NbUserData;
	/** C type : void*[10] */
	public Pointer[] UserData = new Pointer[10];
	public SdifFileS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Name", "Mode", "isSeekable", "FormatVersion", "TypesVersion", "NameValues", "MatrixTypesTable", "FrameTypesTable", "StreamIDsTable", "TimePositions", "Selection", "Stream", "CurrSignature", "CurrFramH", "CurrMtrxH", "CurrFramT", "CurrMtrxT", "PrevTime", "MtrxUsed", "CurrOneRow", "CurrMtrxData", "FileSize", "ChunkSize", "CurrFramPos", "StartChunkPos", "Pos", "TypeDefPass", "StreamIDPass", "TextStreamName", "TextStream", "ErrorCount", "Errors", "NbUserData", "UserData");
	}
	public static class ByReference extends SdifFileS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifFileS implements Structure.ByValue {
		
	};
}
