package sdifstructures;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 838</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifStringS extends Structure {
	/** C type : char* */
	public Pointer str;
	/** Memory size allocated for str */
	public NativeSize TotalSize;
	/** Memory size actually used */
	public NativeSize SizeW;
	/** Number of char read */
	public int NbCharRead;
	public SdifStringS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("str", "TotalSize", "SizeW", "NbCharRead");
	}
	/**
	 * @param str C type : char*<br>
	 * @param TotalSize Memory size allocated for str<br>
	 * @param SizeW Memory size actually used<br>
	 * @param NbCharRead Number of char read
	 */
	public SdifStringS(Pointer str, NativeSize TotalSize, NativeSize SizeW, int NbCharRead) {
		super();
		this.str = str;
		this.TotalSize = TotalSize;
		this.SizeW = SizeW;
		this.NbCharRead = NbCharRead;
	}
	public static class ByReference extends SdifStringS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifStringS implements Structure.ByValue {
		
	};
}
