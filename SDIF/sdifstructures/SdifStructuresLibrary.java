package sdifstructures;
import java.nio.LongBuffer;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.LongByReference;
/**
 * JNA Wrapper for library <b>sdifStructures</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SdifStructuresLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "sdifStructures";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(SdifStructuresLibrary.JNA_LIBRARY_NAME);
	public static final SdifStructuresLibrary INSTANCE = (SdifStructuresLibrary)Native.loadLibrary(SdifStructuresLibrary.JNA_LIBRARY_NAME, SdifStructuresLibrary.class);
	/** enum values */
	public static interface SdifHashIndexTypeE {
		/** <i>native declaration : line 10</i> */
		public static final int eHashChar = 0;
		/** <i>native declaration : line 11</i> */
		public static final int eHashInt4 = 1;
	};
	/** enum values */
	public static interface SdifMachineE {
		/** <i>native declaration : line 191</i> */
		public static final int eUndefinedMachine = 0;
		/** <i>native declaration : line 192</i> */
		public static final int eBigEndian = 1;
		/** <i>native declaration : line 193</i> */
		public static final int eLittleEndian = 2;
		/** <i>native declaration : line 194</i> */
		public static final int eBigEndian64 = 3;
		/** <i>native declaration : line 195</i> */
		public static final int eLittleEndian64 = 4;
		/** <i>native declaration : line 196</i> */
		public static final int ePDPEndian = 5;
	};
	/** enum values */
	public static interface SdifBinaryMode {
		/** <i>native declaration : line 201</i> */
		public static final int eBinaryModeUnknown = 0;
		/** <i>native declaration : line 202</i> */
		public static final int eBinaryModeWrite = 1;
		/** <i>native declaration : line 203</i> */
		public static final int eBinaryModeRead = 2;
		/** <i>native declaration : line 204</i> */
		public static final int eBinaryModeReadWrite = 3;
		/** <i>native declaration : line 205</i> */
		public static final int eBinaryModeStdInput = 4;
		/** <i>native declaration : line 206</i> */
		public static final int eBinaryModeStdOutput = 5;
		/** <i>native declaration : line 207</i> */
		public static final int eBinaryModeStdError = 6;
	};
	/** enum values */
	public static interface SdifSignatureE {
		/**
		 * SDIF header<br>
		 * <i>native declaration : line 227</i>
		 */
		public static final int eSDIF = (((('S') & 0xff) << 24) | ((('D') & 0xff) << 16) | ((('I') & 0xff) << 8) | (('F') & 0xff));
		/**
		 * Name Value Table<br>
		 * <i>native declaration : line 228</i>
		 */
		public static final int e1NVT = (((('1') & 0xff) << 24) | ((('N') & 0xff) << 16) | ((('V') & 0xff) << 8) | (('T') & 0xff));
		/**
		 * TYPe declarations<br>
		 * <i>native declaration : line 229</i>
		 */
		public static final int e1TYP = (((('1') & 0xff) << 24) | ((('T') & 0xff) << 16) | ((('Y') & 0xff) << 8) | (('P') & 0xff));
		/**
		 * Matrix Type Declaration<br>
		 * <i>native declaration : line 230</i>
		 */
		public static final int e1MTD = (((('1') & 0xff) << 24) | ((('M') & 0xff) << 16) | ((('T') & 0xff) << 8) | (('D') & 0xff));
		/**
		 * Frame Type Declaration<br>
		 * <i>native declaration : line 231</i>
		 */
		public static final int e1FTD = (((('1') & 0xff) << 24) | ((('F') & 0xff) << 16) | ((('T') & 0xff) << 8) | (('D') & 0xff));
		/**
		 * ID Stream Table<br>
		 * <i>native declaration : line 232</i>
		 */
		public static final int e1IDS = (((('1') & 0xff) << 24) | ((('I') & 0xff) << 16) | ((('D') & 0xff) << 8) | (('S') & 0xff));
		/**
		 * Start Data Frame Chunk (text files)<br>
		 * <i>native declaration : line 233</i>
		 */
		public static final int eSDFC = (((('S') & 0xff) << 24) | ((('D') & 0xff) << 16) | ((('F') & 0xff) << 8) | (('C') & 0xff));
		/**
		 * END Chunk (text files)<br>
		 * <i>native declaration : line 234</i>
		 */
		public static final int eENDC = (((('E') & 0xff) << 24) | ((('N') & 0xff) << 16) | ((('D') & 0xff) << 8) | (('C') & 0xff));
		/**
		 * END File (text files)<br>
		 * <i>native declaration : line 235</i>
		 */
		public static final int eENDF = (((('E') & 0xff) << 24) | ((('N') & 0xff) << 16) | ((('D') & 0xff) << 8) | (('F') & 0xff));
		/**
		 * FORM for IFF compatibility (obsolete ?)<br>
		 * <i>native declaration : line 236</i>
		 */
		public static final int eFORM = (((('F') & 0xff) << 24) | ((('O') & 0xff) << 16) | ((('R') & 0xff) << 8) | (('M') & 0xff));
		/** <i>native declaration : line 237</i> */
		public static final int eEmptySignature = (((('\0') & 0xff) << 24) | ((('\0') & 0xff) << 16) | ((('\0') & 0xff) << 8) | (('\0') & 0xff));
	};
	/** enum values */
	public static interface SdifModifModeE {
		/** <i>native declaration : line 243</i> */
		public static final int eNoModif = 0;
		/** <i>native declaration : line 244</i> */
		public static final int eCanModif = 1;
	};
	/** enum values */
	public static interface SdifDataTypeE {
		/** <i>native declaration : line 266</i> */
		public static final int eText = 0x0301;
		/** <i>native declaration : line 267</i> */
		public static final int eChar = 0x0301;
		/** <i>native declaration : line 268</i> */
		public static final int eFloat4 = 0x0004;
		/** <i>native declaration : line 269</i> */
		public static final int eFloat8 = 0x0008;
		/** <i>native declaration : line 270</i> */
		public static final int eInt1 = 0x0101;
		/** <i>native declaration : line 271</i> */
		public static final int eInt2 = 0x0102;
		/** <i>native declaration : line 272</i> */
		public static final int eInt4 = 0x0104;
		/** <i>native declaration : line 273</i> */
		public static final int eInt8 = 0x0108;
		/** <i>native declaration : line 274</i> */
		public static final int eUInt1 = 0x0201;
		/** <i>native declaration : line 275</i> */
		public static final int eUInt2 = 0x0202;
		/** <i>native declaration : line 276</i> */
		public static final int eUInt4 = 0x0204;
		/** <i>native declaration : line 277</i> */
		public static final int eUInt8 = 0x0208;
		/**
		 * =  1<br>
		 * <i>native declaration : line 279</i>
		 */
		public static final int eFloat4a = 0x0001;
		/**
		 * Backwards compatibility with old<br>
		 * = 32<br>
		 * <i>native declaration : line 280</i>
		 */
		public static final int eFloat4b = 0x0020;
		/**
		 * IRCAM versions < 3 of SDIF<br>
		 * =  2<br>
		 * <i>native declaration : line 281</i>
		 */
		public static final int eFloat8a = 0x0002;
		/**
		 * IN TEXT MODE ONLY!<br>
		 * = 64<br>
		 * <i>native declaration : line 282</i>
		 */
		public static final int eFloat8b = 0x0040;
	};
	/** enum values */
	public static interface SdifSelectTokens {
		/** <i>native declaration : line 551</i> */
		public static final int sst_specsep = 0;
		/** <i>native declaration : line 551</i> */
		public static final int sst_stream = 1;
		/** <i>native declaration : line 551</i> */
		public static final int sst_frame = 2;
		/** <i>native declaration : line 551</i> */
		public static final int sst_matrix = 3;
		/** <i>native declaration : line 551</i> */
		public static final int sst_column = 4;
		/** <i>native declaration : line 552</i> */
		public static final int sst_row = 5;
		/** <i>native declaration : line 552</i> */
		public static final int sst_time = 6;
		/** <i>native declaration : line 552</i> */
		public static final int sst_list = 7;
		/** <i>native declaration : line 552</i> */
		public static final int sst_range = 8;
		/** <i>native declaration : line 552</i> */
		public static final int sst_delta = 9;
		/**
		 * number of tokens<br>
		 * <i>native declaration : line 553</i>
		 */
		public static final int sst_num = 10;
		/** <i>native declaration : line 553</i> */
		public static final int sst_norange = 0;
	};
	/** enum values */
	public static interface SdifErrorTagE {
		/** <i>native declaration : line 648</i> */
		public static final int eFalse = 0;
		/** <i>native declaration : line 649</i> */
		public static final int eUnknown = 0;
		/** <i>native declaration : line 650</i> */
		public static final int eTrue = 1;
		/** <i>native declaration : line 651</i> */
		public static final int eNoError = 1;
		/** <i>native declaration : line 652</i> */
		public static final int eTypeDataNotSupported = 2;
		/** <i>native declaration : line 653</i> */
		public static final int eNameLength = 3;
		/**
		 * 4<br>
		 * <i>native declaration : line 654</i>
		 */
		public static final int eEof = 4;
		/** <i>native declaration : line 655</i> */
		public static final int eReDefined = 5;
		/** <i>native declaration : line 656</i> */
		public static final int eUnDefined = 6;
		/** <i>native declaration : line 657</i> */
		public static final int eSyntax = 7;
		/** <i>native declaration : line 658</i> */
		public static final int eBadTypesFile = 8;
		/** <i>native declaration : line 659</i> */
		public static final int eBadType = 9;
		/** <i>native declaration : line 660</i> */
		public static final int eBadHeader = 10;
		/** <i>native declaration : line 661</i> */
		public static final int eRecursiveDetect = 11;
		/** <i>native declaration : line 662</i> */
		public static final int eUnInterpreted = 12;
		/** <i>native declaration : line 663</i> */
		public static final int eOnlyOneChunkOf = 13;
		/** <i>native declaration : line 664</i> */
		public static final int eUserDefInFileYet = 14;
		/** <i>native declaration : line 665</i> */
		public static final int eBadMode = 15;
		/** <i>native declaration : line 666</i> */
		public static final int eBadStdFile = 16;
		/** <i>native declaration : line 667</i> */
		public static final int eReadWriteOnSameFile = 17;
		/** <i>native declaration : line 668</i> */
		public static final int eBadFormatVersion = 18;
		/** <i>native declaration : line 669</i> */
		public static final int eMtrxUsedYet = 19;
		/** <i>native declaration : line 670</i> */
		public static final int eMtrxNotInFrame = 20;
		/**
		 * from here on global errors that don't always have an SdifFileT attached<br>
		 * <i>native declaration : line 672</i>
		 */
		public static final int eGlobalError = 21;
		/** <i>native declaration : line 673</i> */
		public static final int eFreeNull = (int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError;
		/** <i>native declaration : line 674</i> */
		public static final int eAllocFail = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 1);
		/** <i>native declaration : line 675</i> */
		public static final int eArrayPosition = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 2);
		/** <i>native declaration : line 676</i> */
		public static final int eFileNotFound = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 3);
		/** <i>native declaration : line 677</i> */
		public static final int eInvalidPreType = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 4);
		/** <i>native declaration : line 678</i> */
		public static final int eAffectationOrder = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 5);
		/** <i>native declaration : line 679</i> */
		public static final int eNoModifErr = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 6);
		/** <i>native declaration : line 680</i> */
		public static final int eNotInDataTypeUnion = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 7);
		/** <i>native declaration : line 681</i> */
		public static final int eNotFound = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 8);
		/** <i>native declaration : line 682</i> */
		public static final int eExistYet = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 9);
		/** <i>native declaration : line 683</i> */
		public static final int eWordCut = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 10);
		/** <i>native declaration : line 684</i> */
		public static final int eTokenLength = ((int)SdifStructuresLibrary.SdifErrorTagE.eGlobalError + 11);
	};
	/** enum values */
	public static interface SdifErrorLevelE {
		/** <i>native declaration : line 692</i> */
		public static final int eFatal = 0;
		/** <i>native declaration : line 693</i> */
		public static final int eError = 1;
		/** <i>native declaration : line 694</i> */
		public static final int eWarning = 2;
		/** <i>native declaration : line 695</i> */
		public static final int eRemark = 3;
		/** <i>native declaration : line 696</i> */
		public static final int eNoLevel = 4;
		/**
		 * level count, must always be last<br>
		 * <i>native declaration : line 697</i>
		 */
		public static final int eNumLevels = 5;
	};
	/** enum values */
	public static interface SdifFileModeE {
		/**
		 * 0<br>
		 * <i>native declaration : line 743</i>
		 */
		public static final int eUnknownFileMode = 0;
		/** <i>native declaration : line 744</i> */
		public static final int eWriteFile = 1;
		/** <i>native declaration : line 745</i> */
		public static final int eReadFile = 2;
		/** <i>native declaration : line 746</i> */
		public static final int eReadWriteFile = 3;
		/**
		 * 4<br>
		 * <i>native declaration : line 747</i>
		 */
		public static final int ePredefinedTypes = 4;
		/**
		 * get rid of flags<br>
		 * <i>native declaration : line 749</i>
		 */
		public static final int eModeMask = 7;
		/**
		 * from here on we have flags that can be or'ed with the previous modes<br>
		 * <i>native declaration : line 752</i>
		 */
		public static final int eParseSelection = 8;
	};
	/**
	 * <i>native declaration : line 757</i><br>
	 * enum values
	 */
	public static interface SdifPassE {
		/** <i>native declaration : line 759</i> */
		public static final int eNotPass = 0;
		/** <i>native declaration : line 760</i> */
		public static final int eReadPass = 1;
		/** <i>native declaration : line 761</i> */
		public static final int eWritePass = 2;
	};
	public static final int SDIFFTRUNCATE_NOT_AVAILABLE = (int)-2;
	public static final int MaxUserData = (int)10;
	public interface KillerFT extends Callback {
		void apply(Pointer voidPtr1);
	};
	public interface SdifExitFuncT extends Callback {
		void apply();
	};
	public interface SdifExceptionFuncT extends Callback {
		void apply(int error_tag, int error_level, Pointer error_message, SdifFileS error_file, SdifErrorS error_ptr, Pointer source_file, int source_line);
	};
	/**
	 * Original signature : <code>int SdifFRewind(SdifFileT*)</code><br>
	 * <i>native declaration : line 67</i>
	 */
	int SdifFRewind(SdifFileS file);
	/**
	 * Original signature : <code>int SdifFTruncate(SdifFileT*)</code><br>
	 * <i>native declaration : line 78</i>
	 */
	int SdifFTruncate(SdifFileS file);
	/**
	 * Original signature : <code>int SdifFGetPos(SdifFileT*, SdiffPosT*)</code><br>
	 * <i>native declaration : line 150</i><br>
	 * @deprecated use the safer methods {@link #SdifFGetPos(sdifstructures.SdifFileS, java.nio.LongBuffer)} and {@link #SdifFGetPos(sdifstructures.SdifFileS, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SdifFGetPos(SdifFileS file, LongByReference pos);
	/**
	 * Original signature : <code>int SdifFGetPos(SdifFileT*, SdiffPosT*)</code><br>
	 * <i>native declaration : line 150</i>
	 */
	int SdifFGetPos(SdifFileS file, LongBuffer pos);
	/**
	 * Original signature : <code>int SdifFSetPos(SdifFileT*, SdiffPosT*)</code><br>
	 * <i>native declaration : line 161</i><br>
	 * @deprecated use the safer methods {@link #SdifFSetPos(sdifstructures.SdifFileS, java.nio.LongBuffer)} and {@link #SdifFSetPos(sdifstructures.SdifFileS, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SdifFSetPos(SdifFileS file, LongByReference pos);
	/**
	 * Original signature : <code>int SdifFSetPos(SdifFileT*, SdiffPosT*)</code><br>
	 * <i>native declaration : line 161</i>
	 */
	int SdifFSetPos(SdifFileS file, LongBuffer pos);
	/**
	 * Original signature : <code>SdifTimePositionT* SdifCreateTimePosition(SdifFloat8, SdiffPosT)</code><br>
	 * <i>native declaration : line 522</i>
	 */
	SdifTimePositionS SdifCreateTimePosition(double Time, long Position);
	/**
	 * Original signature : <code>void SdifKillTimePosition(void*)</code><br>
	 * <i>native declaration : line 523</i>
	 */
	void SdifKillTimePosition(Pointer TimePosition);
	/**
	 * Original signature : <code>SdifTimePositionLT* SdifCreateTimePositionL()</code><br>
	 * <i>native declaration : line 525</i>
	 */
	SdifTimePositionLS SdifCreateTimePositionL();
	/**
	 * Original signature : <code>void SdifKillTimePositionL(SdifTimePositionLT*)</code><br>
	 * <i>native declaration : line 526</i>
	 */
	void SdifKillTimePositionL(SdifTimePositionLS TimePositionL);
	/**
	 * Original signature : <code>SdifTimePositionLT* SdifTimePositionLPutTail(SdifTimePositionLT*, SdifFloat8, SdiffPosT)</code><br>
	 * <i>native declaration : line 528</i>
	 */
	SdifTimePositionLS SdifTimePositionLPutTail(SdifTimePositionLS TimePositionL, double Time, long Position);
	/**
	 * Original signature : <code>SdifTimePositionT* SdifTimePositionLGetTail(SdifTimePositionLT*)</code><br>
	 * <i>native declaration : line 530</i>
	 */
	SdifTimePositionS SdifTimePositionLGetTail(SdifTimePositionLS TimePositionL);
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
}
