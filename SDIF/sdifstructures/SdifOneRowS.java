package sdifstructures;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 465</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SdifOneRowS extends Structure {
	/** C type : SdifDataTypeET */
	public int DataType;
	/** C type : SdifUInt4 */
	public int NbData;
	/** C type : DataTypeUT */
	public DataTypeU Data;
	/** C type : SdifUInt4 */
	public int NbGranuleAlloc;
	public SdifOneRowS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("DataType", "NbData", "Data", "NbGranuleAlloc");
	}
	/**
	 * @param DataType C type : SdifDataTypeET<br>
	 * @param NbData C type : SdifUInt4<br>
	 * @param Data C type : DataTypeUT<br>
	 * @param NbGranuleAlloc C type : SdifUInt4
	 */
	public SdifOneRowS(int DataType, int NbData, DataTypeU Data, int NbGranuleAlloc) {
		super();
		this.DataType = DataType;
		this.NbData = NbData;
		this.Data = Data;
		this.NbGranuleAlloc = NbGranuleAlloc;
	}
	public static class ByReference extends SdifOneRowS implements Structure.ByReference {
		
	};
	public static class ByValue extends SdifOneRowS implements Structure.ByValue {
		
	};
}
